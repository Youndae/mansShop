<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.shop.mapper.MyPageMapper">

    <select id="getLikeList" resultType="LikeListDTO">
        SELECT l.id as likeId
            , p.id as productId
            , p.productName as productName
            , p.productPrice as productPrice
            , p.productDiscount as productDiscount
            , p.thumbnail as thumbnail
            , sum(op.stock) as stock
            , l.createdAt as createdAt
        FROM ProductLike l
        INNER JOIN product p
        ON l.productId = p.id
        INNER JOIN productOption op
        ON op.productId = p.id
        WHERE l.userId = #{userId}
        GROUP BY l.id, p.id, p.productName, p.productPrice, p.productDiscount, p.thumbnail, l.createdAt
        ORDER BY l.id DESC
        OFFSET #{cri.offset} ROWS FETCH NEXT #{cri.amount} ROWS ONLY
    </select>

    <select id="getLikeTotalElements" resultType="int">
        SELECT distinct(count(id))
        FROM productLike
        WHERE userid = #{userId}
    </select>

    <select id="getProductQnAList" resultType="MyPageProductQnAListDTO">
        SELECT q.id as id
            , p.productName as productName
            , q.status as status
            , q.createdAt as createdAt
        FROM productQnA q
        INNER JOIN product p
        ON q.productId = p.id
        WHERE userId = #{userId}
        ORDER BY q.id DESC
        OFFSET #{cri.offset} ROWS FETCH NEXT #{cri.amount} ROWS ONLY
    </select>

    <select id="getProductQnATotalElements" resultType="int">
        SELECT distinct(count(id))
        FROM productQnA
        WHERE userid = #{userId}
    </select>

    <select id="getMemberQnAList" resultType="MyPageMemberQnAListDTO">
        SELECT m.id as id
            , m.memberQnATitle as title
            , m.status as status
            , c.qnaClassificationName as classification
            , m.updatedAt as updatedAt
        FROM memberQnA m
        INNER JOIN qnaClassification c
        on m.qnAClassificationId = c.id
        WHERE userId = #{userId}
        ORDER BY m.id DESC
        OFFSET #{cri.offset} ROWS FETCH NEXT #{cri.amount} ROWS ONLY
    </select>

    <select id="getMemberQnATotalElements" resultType="int">
        SELECT distinct(count(id))
        FROM memberQnA
        WHERE userid = #{userId}
    </select>

    <select id="getReviewList" resultType="MyPageReviewListDTO">
        SELECT r.id as id
            , p.thumbnail as thumbnail
            , p.productName as productName
            , r.updatedAt as updatedAt
        FROM productReview r
        INNER JOIN product p
        on r.productId = p.id
        WHERE userId = #{userId}
        ORDER BY r.id DESC
        OFFSET #{cri.offset} ROWS FETCH NEXT #{cri.amount} ROWS ONLY
    </select>

    <select id="getReviewTotalElements" resultType="int">
        SELECT distinct(count(id))
        FROM productReview
        WHERE userid = #{userId}
    </select>

    <select id="getReviewDetail" resultType="MyPageReviewDetailDTO">
        SELECT r.id as id
            , p.id as productId
            , p.productName as productName
            , r.reviewContent as content
            , r.updatedAt as updatedAt
            , rr.replyContent as replyContent
            , rr.updatedAt as replyUpdatedAt
        FROM productReview r
        INNER JOIN product p
        ON r.productId = p.id
        LEFT OUTER JOIN productReviewReply rr
        ON r.id = rr.reviewId
        WHERE r.userId = #{userId}
            AND r.id = #{reviewId}
    </select>

</mapper>