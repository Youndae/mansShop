<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.shop.mapper.ProductMapper">

    <select id="findById" resultType="Product">
        SELECT *
        FROM product
        WHERE id = #{productId}
    </select>

    <select id="findOrderProductByOptionIds" resultType="OrderProductDTO">
        <foreach collection="dto.optionNoList" item="optionId" index="index" open="" separator=" UNION ALL " close="">
            SELECT p.id as productId
                , p.productName as productName
                , op.id as productOptionId
                , op.productSize as pSize
                , op.productColor as pColor
                , p.productPrice as price
                , p.productDiscount as discount
                , ${dto.countList[index]} as count
            FROM product p
            INNER JOIN productOption op
            ON p.id = op.productId
            WHERE op.id = #{optionId}
        </foreach>
    </select>

    <update id="patchProductToOrder" parameterType="java.util.List">
        <foreach collection="list" index="index" item="product" open="DECLARE BEGIN" separator=";" close="; END;">
            UPDATE product
            SET productSales = productSales + #{product.count}
            WHERE id = #{product.id}
        </foreach>
    </update>

    <select id="findAllByAdminProduct" resultType="AdminProductListDTO">
        SELECT p.id as productId
            , p.classificationId as classification
            , p.productName as productName
            , sum(op.stock) as stock
            , count(op.id) as optionCount
            , p.productPrice as price
        FROM product p
        INNER JOIN productOption op
        ON p.id = op.productId
        <include refid="productSearchCondition"/>
        GROUP BY p.id, p.classificationId, p.productName, p.productPrice, p.updatedAt
        ORDER BY p.updatedAt DESC
        OFFSET #{cri.offset} ROWS FETCH NEXT #{cri.amount} ROWS ONLY
    </select>

    <sql id="productSearchCondition">
        <trim prefix="WHERE ">
            <if test="cri.keyword != null">p.productName LIKE '%'||#{cri.keyword}||'%'</if>
        </trim>
    </sql>

    <select id="countByAdminProductTotalElements" resultType="int">
        SELECT distinct(count(p.id))
        FROM product p
        <include refid="productSearchCondition"/>
    </select>

    <update id="patchProduct">
        UPDATE PRODUCT
        SET classificationId = #{entity.classificationId}
            , productName = #{entity.productName}
            , productPrice = #{entity.productPrice}
            , productDiscount = #{entity.productDiscount}
            , isOpen = #{entity.isOpen}
            , updatedAt = SYSDATE
            <include refid="patchProductThumbnailCondition"/>
        WHERE id = #{entity.id}
    </update>

    <sql id="patchProductThumbnailCondition">
        <trim prefix="">
            <if test="entity.thumbnail != null">
                , thumbnail = #{entity.thumbnail}
            </if>
        </trim>
    </sql>

    <insert id="saveProduct" parameterType="Product">
        INSERT INTO product(
                id
                , classificationId
                , productName
                , productPrice
                , thumbnail
                , productDiscount
                , isOpen
        )
        VALUES (
               #{id}
               , #{classificationId}
               , #{productName}
               , #{productPrice}
               , #{thumbnail}
               , #{productDiscount}
               , #{isOpen}
               )
    </insert>

    <select id="findAllOrderByStock" resultType="AdminProductStockInfoDTO">
        SELECT p.id as productId
            , p.classificationId as classification
            , p.productName as productName
            , sum(op.stock) as totalStock
            , p.isOpen as isOpen
        FROM product p
        INNER JOIN productOption op
        ON p.id = op.productId
        <include refid="productSearchCondition"/>
        GROUP BY p.id, p.classificationid, p.productName, p.isOpen
        ORDER BY totalStock
        OFFSET #{cri.offset} ROWS FETCH NEXT #{cri.amount} ROWS ONLY
    </select>

    <select id="findAllByDiscountList" resultType="AdminDiscountResponseDTO">
        SELECT id as productId
            , classificationId as classification
            , productName as productName
            , productPrice as price
            , productDiscount as discount
        FROM product
        WHERE productDiscount > 0
        <include refid="productSearchKeywordCondition"/>
        ORDER BY updatedAt DESC
        OFFSET #{cri.offset} ROWS FETCH NEXT #{cri.amount} ROWS ONLY
    </select>

    <select id="countByDiscountList" resultType="int">
        SELECT distinct(count(id))
        FROM product
        WHERE productDiscount > 0
        <include refid="productSearchKeywordCondition"/>
    </select>

    <sql id="productSearchKeywordCondition">
        <trim prefix="AND ">
            <if test="cri.keyword != null">productName LIKE '%'||#{cri.keyword}||'%'</if>
        </trim>
    </sql>

    <select id="findAllByClassificationId" resultType="AdminDiscountProductDTO">
        SELECT id
            , productName
        FROM product
        WHERE classificationId = #{category}
    </select>

    <update id="patchDiscountProduct" parameterType="AdminPatchDiscountDTO">
        UPDATE product
        SET productDiscount = #{discount}
        WHERE id IN
              <foreach collection="productIds" item="item" open="(" separator="," close=")">
                  #{item}
              </foreach>
    </update>

    <select id="getProductSalesList" resultType="AdminProductSalesListDTO">
        SELECT p.classificationId as classification
        , p.id as productId
        , p.productName as productName
        , (SELECT sum(orderDetailCount) FROM productOrderDetail WHERE productId = p.id) as sales
        , p.productSales as salesQuantity
        FROM product p
        <include refid="productSalesCondition"/>
        ORDER BY p.classificationId DESC
        OFFSET #{cri.offset} ROWS FETCH NEXT #{cri.amount} ROWS ONLY
    </select>

    <select id="getProductSalesListTotalElements" resultType="int">
        SELECT distinct(count(id))
        FROM product
        <include refid="productSalesCondition"/>
    </select>

    <sql id="productSalesCondition">
        <trim prefix="WHERE ">
            <if test="cri.keyword != null">
                productName LIKE '%' || #{cri.keyword} || '%'
            </if>
        </trim>
    </sql>
</mapper>